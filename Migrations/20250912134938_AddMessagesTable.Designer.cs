// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolProject.Data;

#nullable disable

namespace SchoolProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250912134938_AddMessagesTable")]
    partial class AddMessagesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolProject.Models.Account", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailVerificationTokenHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalProviderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("IsTwoFactorEnabled")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("LastExternalLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResetPin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPinExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TwoFactorRecoveryCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "admin@school.com",
                            FailedLoginAttempts = 0,
                            IsTwoFactorEnabled = "False",
                            Name = "Admin",
                            Password = "admin123",
                            Role = "Administrator",
                            Surname = "User",
                            Title = "System Admin",
                            UserStatus = "Active"
                        },
                        new
                        {
                            UserID = 2,
                            Email = "lecturer@school.com",
                            FailedLoginAttempts = 0,
                            IsTwoFactorEnabled = "False",
                            Name = "Lecturer",
                            Password = "admin123",
                            Role = "Lecturer",
                            Surname = "User",
                            Title = "System Lecturer",
                            UserStatus = "Active"
                        },
                        new
                        {
                            UserID = 3,
                            Email = "student@school.com",
                            FailedLoginAttempts = 0,
                            IsTwoFactorEnabled = "False",
                            Name = "Student",
                            Password = "admin123",
                            Role = "Student",
                            Surname = "User",
                            Title = "System Student",
                            UserStatus = "Active"
                        });
                });

            modelBuilder.Entity("SchoolProject.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentID"));

                    b.Property<string>("AssessmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessmentTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentModuleID")
                        .HasColumnType("int");

                    b.HasKey("AssessmentID");

                    b.HasIndex("AssessmentTypeID");

                    b.HasIndex("StudentModuleID");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("SchoolProject.Models.AssessmentType", b =>
                {
                    b.Property<int>("AssessmentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentTypeID"));

                    b.Property<string>("AssessmentTypeDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssessmentTypeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssessmentTypeID");

                    b.ToTable("AssessmentTypes");

                    b.HasData(
                        new
                        {
                            AssessmentTypeID = 1,
                            AssessmentTypeDescription = "Formal written examination",
                            AssessmentTypeStatus = "Active"
                        },
                        new
                        {
                            AssessmentTypeID = 2,
                            AssessmentTypeDescription = "Short knowledge test",
                            AssessmentTypeStatus = "Active"
                        },
                        new
                        {
                            AssessmentTypeID = 3,
                            AssessmentTypeDescription = "Practical or theoretical work assignment",
                            AssessmentTypeStatus = "Active"
                        },
                        new
                        {
                            AssessmentTypeID = 4,
                            AssessmentTypeDescription = "Extended practical project work",
                            AssessmentTypeStatus = "Active"
                        },
                        new
                        {
                            AssessmentTypeID = 5,
                            AssessmentTypeDescription = "Oral presentation of work",
                            AssessmentTypeStatus = "Active"
                        },
                        new
                        {
                            AssessmentTypeID = 6,
                            AssessmentTypeDescription = "Hands-on practical assessment",
                            AssessmentTypeStatus = "Active"
                        },
                        new
                        {
                            AssessmentTypeID = 7,
                            AssessmentTypeDescription = "Analysis of real-world scenarios",
                            AssessmentTypeStatus = "Active"
                        },
                        new
                        {
                            AssessmentTypeID = 8,
                            AssessmentTypeDescription = "Collection of work samples",
                            AssessmentTypeStatus = "Active"
                        },
                        new
                        {
                            AssessmentTypeID = 9,
                            AssessmentTypeDescription = "Scientific laboratory report",
                            AssessmentTypeStatus = "Active"
                        },
                        new
                        {
                            AssessmentTypeID = 10,
                            AssessmentTypeDescription = "Academic research paper",
                            AssessmentTypeStatus = "Active"
                        });
                });

            modelBuilder.Entity("SchoolProject.Models.LecturerModule", b =>
                {
                    b.Property<int>("LecturerModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LecturerModuleID"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModLecturerStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LecturerModuleID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("UserID");

                    b.ToTable("LecturerModules");
                });

            modelBuilder.Entity("SchoolProject.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IsDeletedByReceiver")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("IsDeletedBySender")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SchoolProject.Models.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleID"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModuleStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleID");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            ModuleID = 1,
                            Duration = 12,
                            ModuleName = "Mathematics 101",
                            ModuleStatus = "Active",
                            ModuleType = "Core"
                        },
                        new
                        {
                            ModuleID = 2,
                            Duration = 14,
                            ModuleName = "Physics 101",
                            ModuleStatus = "Active",
                            ModuleType = "Core"
                        },
                        new
                        {
                            ModuleID = 3,
                            Duration = 15,
                            ModuleName = "Chemistry 101",
                            ModuleStatus = "Active",
                            ModuleType = "Core"
                        },
                        new
                        {
                            ModuleID = 4,
                            Duration = 10,
                            ModuleName = "Biology 101",
                            ModuleStatus = "Active",
                            ModuleType = "Core"
                        },
                        new
                        {
                            ModuleID = 5,
                            Duration = 16,
                            ModuleName = "Computer Science 101",
                            ModuleStatus = "Active",
                            ModuleType = "Elective"
                        });
                });

            modelBuilder.Entity("SchoolProject.Models.RememberedDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Revoked")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RememberedDevices");
                });

            modelBuilder.Entity("SchoolProject.Models.StudentModule", b =>
                {
                    b.Property<int>("StudentModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentModuleID"));

                    b.Property<int?>("AccountUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LecturerModuleID")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("StudModStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("StudentModuleID");

                    b.HasIndex("AccountUserID");

                    b.HasIndex("LecturerModuleID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("UserID");

                    b.ToTable("StudentModules");
                });

            modelBuilder.Entity("SchoolProject.Models.Assessment", b =>
                {
                    b.HasOne("SchoolProject.Models.AssessmentType", "AssessmentType")
                        .WithMany()
                        .HasForeignKey("AssessmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.StudentModule", "StudentModule")
                        .WithMany()
                        .HasForeignKey("StudentModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentType");

                    b.Navigation("StudentModule");
                });

            modelBuilder.Entity("SchoolProject.Models.LecturerModule", b =>
                {
                    b.HasOne("SchoolProject.Models.Module", "Module")
                        .WithMany("LecturerModules")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Account", "Lecturer")
                        .WithMany("LecturerModules")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("SchoolProject.Models.Message", b =>
                {
                    b.HasOne("SchoolProject.Models.Account", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SchoolProject.Models.RememberedDevice", b =>
                {
                    b.HasOne("SchoolProject.Models.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolProject.Models.StudentModule", b =>
                {
                    b.HasOne("SchoolProject.Models.Account", null)
                        .WithMany("StudentModules")
                        .HasForeignKey("AccountUserID");

                    b.HasOne("SchoolProject.Models.LecturerModule", "LecturerModule")
                        .WithMany()
                        .HasForeignKey("LecturerModuleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolProject.Models.Module", null)
                        .WithMany("StudentModules")
                        .HasForeignKey("ModuleID");

                    b.HasOne("SchoolProject.Models.Account", "Student")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LecturerModule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolProject.Models.Account", b =>
                {
                    b.Navigation("LecturerModules");

                    b.Navigation("StudentModules");
                });

            modelBuilder.Entity("SchoolProject.Models.Module", b =>
                {
                    b.Navigation("LecturerModules");

                    b.Navigation("StudentModules");
                });
#pragma warning restore 612, 618
        }
    }
}
