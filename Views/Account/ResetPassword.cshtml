@{
    ViewData["Title"] = "Reset Password";
}
<partial name="_NotificationPartial" />

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-lg rounded-4 border-0 overflow-hidden">
                <div class="card-header bg-gradient-info text-white text-center py-4 border-0">
                    <div class="icon-container bg-white bg-opacity-25 rounded-circle d-inline-flex p-3 mb-3 shadow-sm">
                        <i class="bi bi-key-fill text-white fs-2"></i>
                    </div>
                    <h3 class="fw-bold mb-1">Reset Your Password</h3>
                    <p class="mb-0 opacity-90">Enter the PIN sent to your email and set a new password</p>
                </div>

                <div class="card-body p-4 p-sm-5">
                    <form id="resetPasswordForm" asp-action="ResetPassword" method="post" novalidate class="needs-validation">
                        <div asp-validation-summary="All" class="alert alert-danger mb-4"></div>

                        <!-- PIN Input -->
                        <div class="mb-4">
                            <label for="pin" class="form-label fw-semibold">6-digit Verification PIN</label>
                            <div class="input-group has-validation">
                                <span class="input-group-text bg-light">
                                    <i class="bi bi-shield-lock-fill text-secondary"></i>
                                </span>
                                <input type="text"
                                       id="pin"
                                       name="pin"
                                       class="form-control form-control-lg text-center tracking-wide"
                                       maxlength="6"
                                       placeholder="• • • • • •"
                                       required
                                       pattern="^\d{6}$"
                                       aria-describedby="pinHelp" />
                                <div class="valid-feedback feedback-tooltip">
                                    <i class="bi bi-check-circle-fill"></i> Valid PIN format
                                </div>
                                <div class="invalid-feedback feedback-tooltip">
                                    <i class="bi bi-exclamation-circle-fill"></i> Please enter a valid 6-digit PIN.
                                </div>
                            </div>
                            <div id="pinHelp" class="form-text mt-2">
                                <i class="bi bi-info-circle"></i> Check your email for the 6-digit verification code
                            </div>
                        </div>

                        <!-- New Password Input -->
                        <div class="mb-4">
                            <label for="newPassword" class="form-label fw-semibold">New Password</label>
                            <div class="input-group has-validation">
                                <span class="input-group-text bg-light">
                                    <i class="bi bi-lock-fill text-secondary"></i>
                                </span>
                                <input type="password"
                                       id="newPassword"
                                       name="newPassword"
                                       class="form-control form-control-lg"
                                       placeholder="Create a strong password"
                                       required
                                       minlength="8"
                                       aria-describedby="passwordHelp" />
                                <button type="button" class="btn btn-outline-secondary toggle-password" data-target="newPassword">
                                    <i class="bi bi-eye-fill"></i>
                                </button>
                                <div class="valid-feedback feedback-tooltip">
                                    <i class="bi bi-check-circle-fill"></i> Password meets requirements
                                </div>
                                <div class="invalid-feedback feedback-tooltip">
                                    <i class="bi bi-exclamation-circle-fill"></i> Password must be at least 8 characters.
                                </div>
                            </div>
                            <div id="passwordHelp" class="form-text mt-2">
                                <div class="password-strength mt-2">
                                    <div class="progress mb-2" style="height: 5px;">
                                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                                    </div>
                                    <small class="password-strength-text">Password strength: None</small>
                                </div>
                                <div class="password-requirements">
                                    <small class="d-block"><i class="bi bi-dot"></i> At least 8 characters</small>
                                    <small class="d-block"><i class="bi bi-dot"></i> Include uppercase letters</small>
                                    <small class="d-block"><i class="bi bi-dot"></i> Include numbers or symbols</small>
                                </div>
                            </div>
                        </div>

                        <!-- Confirm Password Input -->
                        <div class="mb-4">
                            <label for="confirmPassword" class="form-label fw-semibold">Confirm New Password</label>
                            <div class="input-group has-validation">
                                <span class="input-group-text bg-light">
                                    <i class="bi bi-lock-fill text-secondary"></i>
                                </span>
                                <input type="password"
                                       id="confirmPassword"
                                       name="confirmPassword"
                                       class="form-control form-control-lg"
                                       placeholder="Confirm your new password"
                                       required
                                       aria-describedby="confirmHelp" />
                                <button type="button" class="btn btn-outline-secondary toggle-password" data-target="confirmPassword">
                                    <i class="bi bi-eye-fill"></i>
                                </button>
                                <div class="valid-feedback feedback-tooltip">
                                    <i class="bi bi-check-circle-fill"></i> Passwords match
                                </div>
                                <div class="invalid-feedback feedback-tooltip">
                                    <i class="bi bi-exclamation-circle-fill"></i> Passwords do not match.
                                </div>
                            </div>
                            <div id="confirmHelp" class="form-text mt-2">
                                <i class="bi bi-info-circle"></i> Re-enter your new password for confirmation
                            </div>
                        </div>

                        <div class="d-grid mb-4">
                            <button type="submit" class="btn btn-info btn-lg rounded-pill fw-semibold py-3">
                                <span class="submit-text">
                                    <i class="bi bi-check2-circle me-2"></i>Reset Password
                                </span>
                                <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            </button>
                        </div>
                    </form>

                    <div class="text-center">
                        <p class="mb-0">Go back to</p>
                        <a href="/Account/Login" class="btn btn-link text-decoration-none p-0">
                            <i class="bi bi-arrow-left-short"></i>Login
                        </a>
                    </div>
                </div>
            </div>

            <!-- Security reassurance section -->
            <div class="mt-4 p-3 bg-light rounded-3 text-center">
                <div class="d-flex justify-content-center gap-4 mb-2">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-shield-check text-success me-2"></i>
                        <small>Secure Password Reset</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <i class="bi bi-clock-history text-primary me-2"></i>
                        <small>PIN Valid for 15 Minutes</small>
                    </div>
                </div>
                <small class="text-muted">Your new password will be securely encrypted</small>
            </div>
        </div>
    </div>
</div>


    <style>
        .bg-gradient-info {
            background: linear-gradient(135deg, #0dcaf0 0%, #0aa2c0 100%);
        }

        .icon-container {
            transition: transform 0.3s ease;
        }

        .card:hover .icon-container {
            transform: scale(1.05);
        }

        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 202, 240, 0.25);
            border-color: #0dcaf0;
        }

        .feedback-tooltip {
            position: absolute;
            top: 100%;
            z-index: 5;
            margin-top: 0.25rem;
            padding: 0.5rem;
            border-radius: 0.375rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .btn-info {
            background: linear-gradient(to right, #0dcaf0, #0aa2c0);
            border: none;
            transition: all 0.3s ease;
        }

            .btn-info:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(13, 202, 240, 0.4);
            }

            .btn-info:active {
                transform: translateY(0);
            }

        .toggle-password {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

        .tracking-wide {
            letter-spacing: 0.5em;
            padding-right: 0.5em;
        }

        .password-requirements small {
            color: #6c757d;
            transition: color 0.3s ease;
        }

            .password-requirements small.requirement-met {
                color: #198754;
            }
    </style>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('resetPasswordForm');
            const pinInput = document.getElementById('pin');
            const newPasswordInput = document.getElementById('newPassword');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const submitButton = form.querySelector('button[type="submit"]');
            const submitText = submitButton.querySelector('.submit-text');
            const spinner = submitButton.querySelector('.spinner-border');
            const progressBar = document.querySelector('.progress-bar');
            const strengthText = document.querySelector('.password-strength-text');

            // Password strength meter
            newPasswordInput.addEventListener('input', function() {
                validatePasswordStrength();
                validateConfirmPassword();
            });

            confirmPasswordInput.addEventListener('input', validateConfirmPassword);

            // Toggle password visibility
            document.querySelectorAll('.toggle-password').forEach(button => {
                button.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const targetInput = document.getElementById(targetId);
                    const icon = this.querySelector('i');

                    if (targetInput.type === 'password') {
                        targetInput.type = 'text';
                        icon.classList.remove('bi-eye-fill');
                        icon.classList.add('bi-eye-slash-fill');
                    } else {
                        targetInput.type = 'password';
                        icon.classList.remove('bi-eye-slash-fill');
                        icon.classList.add('bi-eye-fill');
                    }
                });
            });

            // PIN input formatting
            pinInput.addEventListener('input', function() {
                this.value = this.value.replace(/\D/g, '').substring(0, 6);
                validateInput(this);
            });

            // Form submission
            form.addEventListener('submit', function(event) {
                event.preventDefault();

                if (!form.checkValidity()) {
                    event.stopPropagation();
                    form.classList.add('was-validated');
                    return;
                }

                // Check if passwords match
                if (newPasswordInput.value !== confirmPasswordInput.value) {
                    confirmPasswordInput.setCustomValidity("Passwords do not match");
                    confirmPasswordInput.classList.add('is-invalid');
                    return;
                }

                // Show loading state
                submitText.classList.add('d-none');
                spinner.classList.remove('d-none');
                submitButton.disabled = true;

                // Submit the form
                form.submit();
            });

            // Real-time validation
            [pinInput, newPasswordInput, confirmPasswordInput].forEach(input => {
                input.addEventListener('input', function() {
                    validateInput(this);
                });

                input.addEventListener('blur', function() {
                    validateInput(this);
                });
            });

            function validateInput(input) {
                if (input.validity.valid) {
                    input.classList.add('is-valid');
                    input.classList.remove('is-invalid');
                } else {
                    input.classList.add('is-invalid');
                    input.classList.remove('is-valid');
                }

                // Clear custom validity for confirm password when typing
                if (input === confirmPasswordInput) {
                    input.setCustomValidity("");
                }
            }

            function validatePasswordStrength() {
                const password = newPasswordInput.value;
                let strength = 0;

                // Length check
                if (password.length >= 8) strength += 25;

                // Uppercase check
                if (/[A-Z]/.test(password)) strength += 25;

                // Lowercase check
                if (/[a-z]/.test(password)) strength += 25;

                // Number or symbol check
                if (/[0-9]/.test(password) || /[^A-Za-z0-9]/.test(password)) strength += 25;

                // Update progress bar
                progressBar.style.width = strength + '%';

                // Update text and color
                if (strength === 0) {
                    progressBar.classList.remove('bg-warning', 'bg-success');
                    progressBar.classList.add('bg-danger');
                    strengthText.textContent = 'Password strength: None';
                } else if (strength < 75) {
                    progressBar.classList.remove('bg-danger', 'bg-success');
                    progressBar.classList.add('bg-warning');
                    strengthText.textContent = 'Password strength: Weak';
                } else {
                    progressBar.classList.remove('bg-danger', 'bg-warning');
                    progressBar.classList.add('bg-success');
                    strengthText.textContent = 'Password strength: Strong';
                }
            }

            function validateConfirmPassword() {
                if (confirmPasswordInput.value && newPasswordInput.value !== confirmPasswordInput.value) {
                    confirmPasswordInput.setCustomValidity("Passwords do not match");
                    confirmPasswordInput.classList.add('is-invalid');
                    confirmPasswordInput.classList.remove('is-valid');
                } else if (confirmPasswordInput.value) {
                    confirmPasswordInput.setCustomValidity("");
                    confirmPasswordInput.classList.add('is-valid');
                    confirmPasswordInput.classList.remove('is-invalid');
                }
            }
        });
    </script>
}