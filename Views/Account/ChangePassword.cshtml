@model SchoolProject.ViewModel.ChangePasswordViewModel
@{
    ViewData["Title"] = "Change Password";
}
<partial name="_NotificationPartial" />
@section Sidebar {
    @await Html.PartialAsync("_SidebarPartial")
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-xl-6 col-lg-8 col-md-10">
            <div class="card shadow-lg border-0 rounded-4 overflow-hidden">
                <!-- Header -->
                <div class="card-header bg-gradient-primary text-white py-4 border-0">
                    <div class="d-flex align-items-center">
                        <div class="bg-white bg-opacity-25 rounded-circle p-3 me-3">
                            <i class="bi bi-shield-lock display-6"></i>
                        </div>
                        <div>
                            <h2 class="h3 mb-1">Change Password</h2>
                            <p class="mb-0 opacity-75">Secure your account with a new password</p>
                        </div>
                    </div>
                </div>

                <!-- Body -->
                <div class="card-body p-4 p-md-5">
                    <form asp-action="ChangePassword" method="post" novalidate class="needs-validation" id="changePasswordForm">
                        <!-- Current Password -->
                        <div class="mb-4">
                            <label for="CurrentPassword" class="form-label fw-semibold">Current Password</label>
                            <div class="input-group has-validation">
                                <span class="input-group-text bg-light">
                                    <i class="bi bi-lock-fill text-secondary"></i>
                                </span>
                                <input id="CurrentPassword" asp-for="CurrentPassword"
                                       class="form-control form-control-lg"
                                       placeholder="Enter your current password"
                                       type="password" required />
                                <button type="button" class="btn btn-outline-secondary toggle-password" data-target="CurrentPassword">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                                <div class="invalid-feedback">
                                    <span asp-validation-for="CurrentPassword"></span>
                                </div>
                            </div>
                        </div>

                        <!-- New Password -->
                        <div class="mb-4">
                            <label for="NewPassword" class="form-label fw-semibold">New Password</label>
                            <div class="input-group has-validation">
                                <span class="input-group-text bg-light">
                                    <i class="bi bi-key-fill text-secondary"></i>
                                </span>
                                <input id="NewPassword" asp-for="NewPassword"
                                       class="form-control form-control-lg"
                                       placeholder="Create a strong password"
                                       type="password" required
                                       pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$" />
                                <button type="button" class="btn btn-outline-secondary toggle-password" data-target="NewPassword">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                                <div class="invalid-feedback">
                                    <span asp-validation-for="NewPassword"></span>
                                </div>
                            </div>

                            <!-- Password Strength Meter -->
                            <div class="mt-3" id="password-strength-wrapper">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="small fw-semibold">Password Strength</span>
                                    <span class="small" id="strength-text">None</span>
                                </div>
                                <div class="progress mb-3" style="height: 8px;">
                                    <div id="password-strength-bar" class="progress-bar" role="progressbar" style="width: 0%; transition: width 0.3s ease;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>

                                <div class="password-requirements">
                                    <p class="small fw-semibold mb-2">Password must include:</p>
                                    <ul class="list-unstyled small text-muted mb-0" id="password-rules">
                                        <li id="length-rule" class="mb-1"><i class="bi bi-circle me-2"></i>At least 8 characters</li>
                                        <li id="uppercase-rule" class="mb-1"><i class="bi bi-circle me-2"></i>One uppercase letter</li>
                                        <li id="lowercase-rule" class="mb-1"><i class="bi bi-circle me-2"></i>One lowercase letter</li>
                                        <li id="number-rule" class="mb-1"><i class="bi bi-circle me-2"></i>One number</li>
                                        <li id="symbol-rule"><i class="bi bi-circle me-2"></i>One special character</li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <!-- Confirm Password -->
                        <div class="mb-4">
                            <label for="ConfirmPassword" class="form-label fw-semibold">Confirm New Password</label>
                            <div class="input-group has-validation">
                                <span class="input-group-text bg-light">
                                    <i class="bi bi-key-fill text-secondary"></i>
                                </span>
                                <input id="ConfirmPassword" asp-for="ConfirmPassword"
                                       class="form-control form-control-lg"
                                       placeholder="Confirm your new password"
                                       type="password" required />
                                <button type="button" class="btn btn-outline-secondary toggle-password" data-target="ConfirmPassword">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                                <div class="invalid-feedback">
                                    <span asp-validation-for="ConfirmPassword"></span>
                                </div>
                            </div>
                            <div id="password-match-feedback" class="form-text mt-2">
                                <i class="bi bi-info-circle"></i> Passwords must match
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="d-grid mt-4 pt-3">
                            <button type="submit" class="btn btn-primary btn-lg rounded-pill fw-semibold py-3">
                                <span class="submit-text">
                                    <i class="bi bi-shield-check me-2"></i>Update Password
                                </span>
                                <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Security Tips -->
            <div class="mt-4 p-4 bg-light rounded-4">
                <h5 class="mb-3 d-flex align-items-center">
                    <i class="bi bi-lightbulb text-warning me-2"></i>
                    Password Security Tips
                </h5>
                <ul class="list-unstyled mb-0">
                    <li class="mb-2"><i class="bi bi-check-circle text-success me-2"></i>Use a unique password for each account</li>
                    <li class="mb-2"><i class="bi bi-check-circle text-success me-2"></i>Avoid common words and personal information</li>
                    <li class="mb-0"><i class="bi bi-check-circle text-success me-2"></i>Consider using a password manager</li>
                </ul>
            </div>
        </div>
    </div>
</div>


    <style>
        .bg-gradient-primary {
            background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
        }

        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            border-color: #0d6efd;
        }

        .input-group-text {
            transition: all 0.3s ease;
        }

        .form-control:focus + .input-group-text,
        .btn.toggle-password:focus {
            background-color: #e9ecef;
            border-color: #0d6efd;
        }

        .btn-primary {
            background: linear-gradient(to right, #0d6efd, #0a58ca);
            border: none;
            transition: all 0.3s ease;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(13, 110, 253, 0.4);
            }

            .btn-primary:active {
                transform: translateY(0);
            }

        .card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175) !important;
            }

        .password-requirements li.requirement-met {
            color: #198754;
        }

            .password-requirements li.requirement-met i {
                color: #198754;
            }

        .progress-bar {
            transition: width 0.5s ease-in-out;
        }

        /* Custom validation styles */
        .was-validated .form-control:valid,
        .was-validated .form-control:invalid {
            background-image: none;
            padding-right: 0.75rem;
        }

        .was-validated .form-control:valid {
            border-color: #198754;
        }

        .was-validated .form-control:invalid {
            border-color: #dc3545;
        }
    </style>


@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('changePasswordForm');
            const currentPassword = document.getElementById('CurrentPassword');
            const newPassword = document.getElementById('NewPassword');
            const confirmPassword = document.getElementById('ConfirmPassword');
            const strengthBar = document.getElementById('password-strength-bar');
            const strengthText = document.getElementById('strength-text');
            const submitButton = form.querySelector('button[type="submit"]');
            const submitText = submitButton.querySelector('.submit-text');
            const spinner = submitButton.querySelector('.spinner-border');

            // Password visibility toggle
            document.querySelectorAll('.toggle-password').forEach(button => {
                button.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const targetInput = document.getElementById(targetId);
                    const icon = this.querySelector('i');

                    if (targetInput.type === 'password') {
                        targetInput.type = 'text';
                        icon.classList.remove('bi-eye-slash');
                        icon.classList.add('bi-eye');
                    } else {
                        targetInput.type = 'password';
                        icon.classList.remove('bi-eye');
                        icon.classList.add('bi-eye-slash');
                    }
                });
            });

            // Password strength checker
            newPassword.addEventListener('input', function() {
                checkPasswordStrength(this.value);
                validatePasswordMatch();
            });

            confirmPassword.addEventListener('input', validatePasswordMatch);

            // Form submission
            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                    form.classList.add('was-validated');
                    return;
                }

                // Check if new password is same as current
                if (currentPassword.value === newPassword.value) {
                    event.preventDefault();
                    showNotification('error', 'New password cannot be the same as current password');
                    newPassword.classList.add('is-invalid');
                    return;
                }

                // Check if passwords match
                if (newPassword.value !== confirmPassword.value) {
                    event.preventDefault();
                    showNotification('error', 'Passwords do not match');
                    confirmPassword.classList.add('is-invalid');
                    return;
                }

                // Show loading state
                submitText.classList.add('d-none');
                spinner.classList.remove('d-none');
                submitButton.disabled = true;
            });

            // Real-time validation
            [currentPassword, newPassword, confirmPassword].forEach(input => {
                input.addEventListener('input', function() {
                    validateField(this);
                });

                input.addEventListener('blur', function() {
                    validateField(this);
                });
            });

            function validateField(field) {
                if (field.checkValidity()) {
                    field.classList.add('is-valid');
                    field.classList.remove('is-invalid');
                } else {
                    field.classList.add('is-invalid');
                    field.classList.remove('is-valid');
                }
            }

            function checkPasswordStrength(password) {
                let strength = 0;
                const rules = {
                    length: document.getElementById('length-rule'),
                    uppercase: document.getElementById('uppercase-rule'),
                    lowercase: document.getElementById('lowercase-rule'),
                    number: document.getElementById('number-rule'),
                    symbol: document.getElementById('symbol-rule')
                };

                // Check length
                if (password.length >= 8) {
                    strength += 20;
                    rules.length.classList.add('requirement-met');
                    rules.length.innerHTML = '<i class="bi bi-check-circle-fill text-success me-2"></i>At least 8 characters';
                } else {
                    rules.length.classList.remove('requirement-met');
                    rules.length.innerHTML = '<i class="bi bi-circle me-2"></i>At least 8 characters';
                }

                // Check uppercase
                if (/[A-Z]/.test(password)) {
                    strength += 20;
                    rules.uppercase.classList.add('requirement-met');
                    rules.uppercase.innerHTML = '<i class="bi bi-check-circle-fill text-success me-2"></i>One uppercase letter';
                } else {
                    rules.uppercase.classList.remove('requirement-met');
                    rules.uppercase.innerHTML = '<i class="bi bi-circle me-2"></i>One uppercase letter';
                }

                // Check lowercase
                if (/[a-z]/.test(password)) {
                    strength += 20;
                    rules.lowercase.classList.add('requirement-met');
                    rules.lowercase.innerHTML = '<i class="bi bi-check-circle-fill text-success me-2"></i>One lowercase letter';
                } else {
                    rules.lowercase.classList.remove('requirement-met');
                    rules.lowercase.innerHTML = '<i class="bi bi-circle me-2"></i>One lowercase letter';
                }

                // Check numbers
                if (/[0-9]/.test(password)) {
                    strength += 20;
                    rules.number.classList.add('requirement-met');
                    rules.number.innerHTML = '<i class="bi bi-check-circle-fill text-success me-2"></i>One number';
                } else {
                    rules.number.classList.remove('requirement-met');
                    rules.number.innerHTML = '<i class="bi bi-circle me-2"></i>One number';
                }

                // Check symbols
                if (/[\W_]/.test(password)) {
                    strength += 20;
                    rules.symbol.classList.add('requirement-met');
                    rules.symbol.innerHTML = '<i class="bi bi-check-circle-fill text-success me-2"></i>One special character';
                } else {
                    rules.symbol.classList.remove('requirement-met');
                    rules.symbol.innerHTML = '<i class="bi bi-circle me-2"></i>One special character';
                }

                // Update progress bar
                strengthBar.style.width = strength + '%';
                strengthBar.setAttribute('aria-valuenow', strength);

                // Update text and color
                if (strength < 20) {
                    strengthBar.className = 'progress-bar bg-danger';
                    strengthText.textContent = 'Very Weak';
                    strengthText.className = 'small text-danger';
                } else if (strength < 40) {
                    strengthBar.className = 'progress-bar bg-danger';
                    strengthText.textContent = 'Weak';
                    strengthText.className = 'small text-danger';
                } else if (strength < 60) {
                    strengthBar.className = 'progress-bar bg-warning';
                    strengthText.textContent = 'Fair';
                    strengthText.className = 'small text-warning';
                } else if (strength < 80) {
                    strengthBar.className = 'progress-bar bg-info';
                    strengthText.textContent = 'Good';
                    strengthText.className = 'small text-info';
                } else {
                    strengthBar.className = 'progress-bar bg-success';
                    strengthText.textContent = 'Strong';
                    strengthText.className = 'small text-success';
                }
            }

            function validatePasswordMatch() {
                const matchFeedback = document.getElementById('password-match-feedback');

                if (confirmPassword.value && newPassword.value !== confirmPassword.value) {
                    confirmPassword.classList.add('is-invalid');
                    confirmPassword.classList.remove('is-valid');
                    matchFeedback.innerHTML = '<i class="bi bi-x-circle text-danger me-1"></i>Passwords do not match';
                    matchFeedback.className = 'form-text mt-2 text-danger';
                } else if (confirmPassword.value) {
                    confirmPassword.classList.add('is-valid');
                    confirmPassword.classList.remove('is-invalid');
                    matchFeedback.innerHTML = '<i class="bi bi-check-circle text-success me-1"></i>Passwords match';
                    matchFeedback.className = 'form-text mt-2 text-success';
                } else {
                    confirmPassword.classList.remove('is-valid', 'is-invalid');
                    matchFeedback.innerHTML = '<i class="bi bi-info-circle me-1"></i>Passwords must match';
                    matchFeedback.className = 'form-text mt-2';
                }
            }

            // Initialize validation on page load
            validatePasswordMatch();
        });
    </script>
}