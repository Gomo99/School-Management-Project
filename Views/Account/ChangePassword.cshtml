@model SchoolProject.ViewModel.ChangePasswordViewModel
@{
    ViewData["Title"] = "Change Password";
}
<partial name="_NotificationPartial" />
@section Sidebar {
    @await Html.PartialAsync("_SidebarPartial")
}

<div class="container mt-5">
    <h2 class="mb-4 text-center">Change Password</h2>

    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow-lg rounded-3">
                <div class="card-body p-4">
                    <form asp-action="ChangePassword" method="post" novalidate>
                        <div class="mb-4">
                            <label for="CurrentPassword" class="form-label">Current Password</label>
                            <div class="input-group">
                                <input id="CurrentPassword" asp-for="CurrentPassword" class="form-control form-control-lg" placeholder="Enter your current password" type="password" />
                                <button type="button" class="btn btn-outline-secondary" id="toggleCurrentPassword" onclick="togglePasswordVisibility('CurrentPassword')">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback">
                                <span asp-validation-for="CurrentPassword"></span>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label for="NewPassword" class="form-label">New Password</label>
                            <div class="input-group">
                                <input id="NewPassword" asp-for="NewPassword" class="form-control form-control-lg" placeholder="Enter your new password" type="password" />
                                <button type="button" class="btn btn-outline-secondary" id="toggleNewPassword" onclick="togglePasswordVisibility('NewPassword')">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback">
                                <span asp-validation-for="NewPassword"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="ConfirmPassword" class="form-label">Confirm New Password</label>
                            <div class="input-group">
                                <input id="ConfirmPassword" asp-for="ConfirmPassword" class="form-control form-control-lg" placeholder="Confirm your new password" type="password" />
                                <button type="button" class="btn btn-outline-secondary" id="toggleConfirmPassword" onclick="togglePasswordVisibility('ConfirmPassword')">
                                    <i class="bi bi-eye-slash"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback">
                                <span asp-validation-for="ConfirmPassword"></span>
                            </div>
                        </div>

                        <div class="mb-3" id="password-strength-wrapper">
                            <label class="form-label">Password Strength</label>
                            <div class="progress" style="height: 8px;">
                                <div id="password-strength-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                            <ul class="mt-2 small text-muted" id="password-rules">
                                <li id="length-rule">✔ At least 8 characters</li>
                                <li id="uppercase-rule">✔ One uppercase letter</li>
                                <li id="number-rule">✔ One number</li>
                                <li id="symbol-rule">✔ One symbol</li>
                            </ul>
                        </div>

                        <button type="submit" class="btn btn-primary w-100 mt-4 btn-lg">Update Password</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        // Validate and highlight inputs in real time
        const fields = ["CurrentPassword", "NewPassword", "ConfirmPassword"];

        fields.forEach(fieldId => {
            const input = document.getElementById(fieldId);

            input.addEventListener("input", () => {
                if (input.value.trim() !== "") {
                    input.classList.add("is-valid");
                    input.classList.remove("is-invalid");
                } else {
                    input.classList.remove("is-valid");
                    input.classList.add("is-invalid");
                }
            });

            // Initial load check
            if (input.value.trim() !== "") {
                input.classList.add("is-valid");
            }
        });

        // Prevent new password from being the same as current
        document.querySelector('form').addEventListener('submit', function (e) {
            const currentPassword = document.getElementById('CurrentPassword').value;
            const newPassword = document.getElementById('NewPassword').value;

            if (currentPassword === newPassword) {
                e.preventDefault();
                alert("The new password cannot be the same as the current password.");
                document.getElementById('NewPassword').classList.remove("is-valid");
                document.getElementById('NewPassword').classList.add("is-invalid");
            }
        });

        // Toggle visibility of password fields
        function togglePasswordVisibility(passwordFieldId) {
            const passwordField = document.getElementById(passwordFieldId);
            const toggleButton = document.getElementById("toggle" + passwordFieldId);
            const icon = toggleButton.querySelector("i");

            if (passwordField.type === "password") {
                passwordField.type = "text";
                icon.classList.remove("bi-eye-slash");
                icon.classList.add("bi-eye");
            } else {
                passwordField.type = "password";
                icon.classList.remove("bi-eye");
                icon.classList.add("bi-eye-slash");
            }
        }

        const strengthBar = document.getElementById("password-strength-bar");
        const newPasswordInput = document.getElementById("NewPassword");

        const rules = {
            length: document.getElementById("length-rule"),
            uppercase: document.getElementById("uppercase-rule"),
            number: document.getElementById("number-rule"),
            symbol: document.getElementById("symbol-rule")
        };

        function checkStrength(password) {
            let strength = 0;

            // Rule checks
            const hasLength = password.length >= 8;
            const hasUppercase = /[A-Z]/.test(password);
            const hasNumber = /[0-9]/.test(password);
            const hasSymbol = /[\W_]/.test(password);

            // Update rule UI
            rules.length.style.color = hasLength ? "green" : "gray";
            rules.uppercase.style.color = hasUppercase ? "green" : "gray";
            rules.number.style.color = hasNumber ? "green" : "gray";
            rules.symbol.style.color = hasSymbol ? "green" : "gray";

            if (hasLength) strength += 25;
            if (hasUppercase) strength += 25;
            if (hasNumber) strength += 25;
            if (hasSymbol) strength += 25;

            // Set progress bar
            strengthBar.style.width = strength + "%";
            strengthBar.setAttribute("aria-valuenow", strength);

            if (strength <= 25) {
                strengthBar.className = "progress-bar bg-danger";
            } else if (strength <= 50) {
                strengthBar.className = "progress-bar bg-warning";
            } else if (strength <= 75) {
                strengthBar.className = "progress-bar bg-info";
            } else {
                strengthBar.className = "progress-bar bg-success";
            }
        }

        // Re-check strength on every input
        newPasswordInput.addEventListener("input", function () {
            checkStrength(newPasswordInput.value);
        });
    </script>
}

<style>
    #password-rules li {
        list-style: none;
    }

    .card {
        border-radius: 15px;
    }

    .input-group {
        border-radius: 10px;
    }

        .input-group input {
            border-radius: 10px 0 0 10px;
        }

        .input-group button {
            border-radius: 0 10px 10px 0;
        }

    .progress {
        height: 10px;
    }

    .btn-outline-secondary {
        background-color: #f8f9fa;
    }

    /* Real-time feedback styling */
    .is-valid {
        border-color: #28a745 !important;
    }

    .is-invalid {
        border-color: #dc3545 !important;
    }
</style>
