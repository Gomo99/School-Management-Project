@model List<SchoolProject.ViewModel.MessageViewModel>
@{
    ViewData["Title"] = "Sent Messages";
}

@section Sidebar {
    @await Html.PartialAsync("_SidebarPartial")
}

<div class="container-fluid">
    <div class="row">
        <!-- Main Content -->
        <main class="col-md-9 ms-sm-auto px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">Sent Messages</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                    <a href="@Url.Action("Compose", "Account")" class="btn btn-sm btn-primary me-2">
                        <i class="bi bi-pencil-square"></i> Compose
                    </a>
                    <a href="@Url.Action("Inbox", "Account")" class="btn btn-sm btn-outline-secondary">
                        <i class="bi bi-inbox"></i> Inbox
                    </a>
                </div>
            </div>

            <!-- Stats Cards -->
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="flex-grow-1">
                                    <h6 class="card-title text-white-50">TOTAL SENT</h6>
                                    <h3 class="card-text">@Model.Count</h3>
                                </div>
                                <div class="flex-shrink-0">
                                    <i class="bi bi-send display-6 opacity-50"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="flex-grow-1">
                                    <h6 class="card-title text-white-50">READ MESSAGES</h6>
                                    <h3 class="card-text">@Model.Count(m => m.IsRead)</h3>
                                </div>
                                <div class="flex-shrink-0">
                                    <i class="bi bi-eye display-6 opacity-50"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-info text-white">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="flex-grow-1">
                                    <h6 class="card-title text-white-50">UNREAD MESSAGES</h6>
                                    <h3 class="card-text">@Model.Count(m => !m.IsRead)</h3>
                                </div>
                                <div class="flex-shrink-0">
                                    <i class="bi bi-eye-slash display-6 opacity-50"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Search and Filter -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text bg-transparent">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Search sent messages..." id="searchInput">
                                <button class="btn btn-outline-secondary" type="button" id="clearSearch">
                                    <i class="bi bi-x"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="statusFilter">
                                <option value="all">All Status</option>
                                <option value="read">Read</option>
                                <option value="unread">Unread</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="sortFilter">
                                <option value="newest">Newest First</option>
                                <option value="oldest">Oldest First</option>
                                <option value="recipient">Recipient (A-Z)</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Messages List -->
            <div class="card">
                <div class="card-header bg-transparent">
                    <h6 class="mb-0">Sent Messages</h6>
                </div>
                <div class="card-body p-0">
                    @if (Model.Any())
                    {
                        <div class="list-group list-group-flush" id="messagesList">
                            @foreach (var message in Model.OrderByDescending(m => m.SentAt))
                            {
                                <div class="list-group-item list-group-item-action message-item"
                                     data-status="@(message.IsRead ? "read" : "unread")"
                                     data-recipient="@message.ReceiverName.ToLower()"
                                     data-date="@message.SentAt.Ticks">
                                    <div class="d-flex w-100 justify-content-between align-items-start">
                                        <div class="flex-grow-1 me-3">
                                            <div class="d-flex align-items-center mb-1">
                                                <h6 class="mb-0 me-2">To: @message.ReceiverName</h6>
                                                @if (message.IsRead)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="bi bi-check-circle-fill me-1"></i>Read
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">
                                                        <i class="bi bi-clock-history me-1"></i>Unread
                                                    </span>
                                                }
                                            </div>
                                            <p class="mb-1 text-truncate text-muted">@message.Content</p>
                                        </div>
                                        <div class="flex-shrink-0 text-end">
                                            <small class="text-muted">@message.SentAt.ToString("MMM dd, yyyy h:mm tt")</small>
                                            <div class="mt-2">
                                                <a href="@Url.Action("ViewMessage", "Account", new { id = message.MessageId })"
                                                   class="btn btn-sm btn-outline-primary me-1">
                                                    <i class="bi bi-eye"></i> View
                                                </a>
                                                <form asp-action="DeleteMessage" method="post" class="d-inline">
                                                    <input type="hidden" name="id" value="@message.MessageId" />
                                                    <button type="submit" class="btn btn-sm btn-outline-danger"
                                                            onclick="return confirm('Are you sure you want to delete this message?')">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-send display-1 text-muted"></i>
                            <h5 class="mt-3">No sent messages yet</h5>
                            <p class="text-muted">Messages you send will appear here</p>
                            <a href="@Url.Action("Compose", "Account")" class="btn btn-primary mt-2">
                                <i class="bi bi-pencil-square me-2"></i>Compose your first message
                            </a>
                        </div>
                    }
                </div>
                @if (Model.Any())
                {
                    <div class="card-footer bg-transparent">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <span class="text-muted">Showing @Model.Count messages</span>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-outline-secondary" id="selectAll">
                                    <i class="bi bi-check-square"></i> Select All
                                </button>
                                <button class="btn btn-sm btn-outline-danger ms-2" id="deleteSelected">
                                    <i class="bi bi-trash"></i> Delete Selected
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </main>
    </div>
</div>

<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

<style>
    .message-item {
        transition: all 0.2s ease;
        border-left: 4px solid transparent;
    }

        .message-item:hover {
            background-color: #f8f9fa;
            border-left-color: #0d6efd;
            transform: translateX(2px);
        }

        .message-item[data-status="unread"] {
            background-color: #f8f9fa;
            border-left-color: #6c757d;
        }

    .list-group-item {
        padding: 1.25rem;
    }

    .card {
        border-radius: 0.75rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .stats-card {
        border-radius: 0.75rem;
    }

    .btn {
        border-radius: 0.5rem;
    }

    .form-control, .form-select {
        border-radius: 0.5rem;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Search functionality
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            const sortFilter = document.getElementById('sortFilter');
            const clearSearch = document.getElementById('clearSearch');
            const messagesList = document.getElementById('messagesList');
            const messageItems = document.querySelectorAll('.message-item');

            // Filter function
            function filterMessages() {
                const searchText = searchInput.value.toLowerCase();
                const statusValue = statusFilter.value;
                const sortValue = sortFilter.value;

                messageItems.forEach(item => {
                    const recipient = item.getAttribute('data-recipient');
                    const content = item.querySelector('p').textContent.toLowerCase();
                    const status = item.getAttribute('data-status');
                    const matchesSearch = recipient.includes(searchText) || content.includes(searchText);
                    const matchesStatus = statusValue === 'all' || status === statusValue;

                    item.style.display = (matchesSearch && matchesStatus) ? 'block' : 'none';
                });

                // Sort functionality
                const visibleItems = Array.from(messageItems).filter(item => item.style.display !== 'none');

                visibleItems.sort((a, b) => {
                    switch(sortValue) {
                        case 'newest':
                            return parseInt(b.getAttribute('data-date')) - parseInt(a.getAttribute('data-date'));
                        case 'oldest':
                            return parseInt(a.getAttribute('data-date')) - parseInt(b.getAttribute('data-date'));
                        case 'recipient':
                            return a.getAttribute('data-recipient').localeCompare(b.getAttribute('data-recipient'));
                        default:
                            return 0;
                    }
                });

                // Reorder in DOM
                visibleItems.forEach(item => messagesList.appendChild(item));
            }

            // Event listeners
            searchInput.addEventListener('input', filterMessages);
            statusFilter.addEventListener('change', filterMessages);
            sortFilter.addEventListener('change', filterMessages);

            clearSearch.addEventListener('click', function() {
                searchInput.value = '';
                filterMessages();
            });

            // Select all functionality
            const selectAllBtn = document.getElementById('selectAll');
            const deleteSelectedBtn = document.getElementById('deleteSelected');
            let isSelectAll = false;

            selectAllBtn.addEventListener('click', function() {
                const checkboxes = document.querySelectorAll('.message-select');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = !isSelectAll;
                });
                isSelectAll = !isSelectAll;
                selectAllBtn.innerHTML = isSelectAll ?
                    '<i class="bi bi-x-square"></i> Deselect All' :
                    '<i class="bi bi-check-square"></i> Select All';
            });

            deleteSelectedBtn.addEventListener('click', function() {
                const selectedMessages = document.querySelectorAll('.message-select:checked');
                if (selectedMessages.length === 0) {
                    alert('Please select at least one message to delete.');
                    return;
                }

                if (confirm(`Are you sure you want to delete ${selectedMessages.length} message(s)?`)) {
                    // This would typically be handled by a form submission
                    alert('Delete functionality would be implemented here.');
                }
            });

            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}